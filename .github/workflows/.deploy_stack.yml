name: .Deploy Stack

on:
  workflow_call:
    inputs:
      ### Required
      environment_name:
        description: 'The name of the environment to deploy to'
        required: true
        default: 'dev'
        type: string
      command:
        description: 'The terragrunt command to run'
        required: true
        default: 'apply'
        type: string
      tag:
        description: 'The tag of the containers to deploy'
        default: 'latest'
        type: string
        required: false
      app_env:
        required: false
        type: string
        description: 'The APP env separates between AWS ENV and Actual APP, since AWS dev is where PR, and TEST is deployed'
    outputs:
      API_GW_URL: 
        value: ${{ jobs.deploy-api.outputs.API_GW_URL }}
      S3_BUCKET_ARN:
        value: ${{ jobs.deploy-cloudfront.outputs.S3_BUCKET_ARN }}
      CF_DOMAIN:
        value: ${{ jobs.deploy-cloudfront.outputs.CF_DOMAIN }}
      CF_DISTRIBUTION_ID:
        value: ${{ jobs.deploy-cloudfront.outputs.CF_DISTRIBUTION_ID }}
env:
    AWS_REGION: ca-central-1
permissions:
  id-token: write # This is required for requesting the JWT
  contents: write # This is required for actions/checkout
jobs:
  
  ecr:
    name:  ECR
    runs-on: ubuntu-24.04
    environment: ${{ inputs.environment_name }}
    strategy:
      matrix:
        package: [backend]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          role-session-name: gha-ecr-push
          aws-region: ca-central-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Pull, tag and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          GHCR_IMAGE: ghcr.io/${{ github.repository }}/${{ matrix.package }}:${{ inputs.tag }}
        run: |
          # Check if command is apply and validate image exists
          if [ "${{ inputs.command }}" == "apply" ]; then
            docker manifest inspect $GHCR_IMAGE > /dev/null 2>&1 || { echo "Error: Image $GHCR_IMAGE does not exist and command is apply"; exit 1; }
            docker pull $GHCR_IMAGE || { echo "Error: Failed to pull image $GHCR_IMAGE"; exit 1; }
            
            # Tag for ECR
            ECR_IMAGE=$ECR_REGISTRY/${{ github.repository }}:${{ matrix.package }}-${{ inputs.tag }}
            docker tag $GHCR_IMAGE $ECR_IMAGE
            
            # Push to ECR
            docker push $ECR_IMAGE
          else
            echo "Command is not apply, continuing"
            exit 0;
          fi
          
  stack-prefix:
    name: Stack Prefix
    needs: ecr
    uses: ./.github/workflows/.stack-prefix.yml
  deploy-db:
    name: Deploys Database
    needs: [stack-prefix]
    uses: ./.github/workflows/.deployer.yml
    with:
      environment_name: ${{ inputs.environment_name }}
      command: ${{ inputs.command }}
      working_directory: database
      app_env: ${{ inputs.app_env }}
      stack_prefix: ${{ needs.stack-prefix.outputs.stack_prefix }}
    secrets: inherit
  deploy-api:
    name: Deploys API
    needs: [deploy-db, stack-prefix]
    uses: ./.github/workflows/.deployer.yml
    with:
      environment_name: ${{ inputs.environment_name }}
      command: ${{ inputs.command }}
      tag: ${{ inputs.tag }}
      app_env: ${{ inputs.app_env }}
      working_directory: api
      stack_prefix: ${{ needs.stack-prefix.outputs.stack_prefix }}
    secrets: inherit
  deploy-cloudfront:
    name: Deploys Cloudfront
    needs: [stack-prefix]
    uses: ./.github/workflows/.deployer.yml
    with:
      environment_name: ${{ inputs.environment_name }}
      command: ${{ inputs.command }}
      tag: ${{ inputs.tag }}
      app_env: ${{ inputs.app_env }}
      working_directory: frontend
      stack_prefix: ${{ needs.stack-prefix.outputs.stack_prefix }}
    secrets: inherit
  build-ui:
    name: Build And upload UI to s3 ${{ inputs.environment_name }}
    environment: ${{ inputs.environment_name }}
    if: (inputs.command == 'apply')
    needs: [deploy-api, deploy-cloudfront]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
        with:
            role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
            aws-region: ${{ env.AWS_REGION }}
      - name: Build And Update UI (CF)
        working-directory: frontend
        env:
          VITE_API_BASE_URL: ${{ needs.deploy-api.outputs.API_GW_URL }}/api
          S3_BUCKET_ARN: ${{ needs.deploy-cloudfront.outputs.S3_BUCKET_ARN }}
          CF_DISTRIBUTION_ID: ${{ needs.deploy-cloudfront.outputs.CF_DISTRIBUTION_ID }}
        run: |
          npm run deploy
          aws s3 sync --delete ./dist s3://$(echo "$S3_BUCKET_ARN" | cut -d: -f6)
          aws cloudfront create-invalidation --distribution-id $CF_DISTRIBUTION_ID --paths "/*"
